const express = require('express');
const multer  = require('multer');
const { v4: uuidv4 } = require('uuid');
const path    = require('path');
const { exec }= require('child_process');
const cors    = require('cors');
const fs = require('fs'); // הוספנו עבור פעולות קבצים
const PDFMergerModule = require('pdf-merger-js');
const PDFMerger = PDFMergerModule.default || PDFMergerModule;

// --- קבועים קיימים ---
const IN_DIR  = '/srv/converter/input';  // תיקייה על השרת (host)
const OUT_DIR = '/srv/converter/output'; // תיקייה על השרת (host)
const PORT    = process.env.PORT || 3000;

const app = express();
app.use(cors()); // מאפשר בקשות CORS

// Middleware בסיסי של Express
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// הגשת קבצים סטטיים מהתיקייה OUT_DIR (למשל, קבצים שהומרו)
app.use('/files', express.static(OUT_DIR));

// --- הגדרת Multer עבור נקודת הקצה /convert הקיימת ---
const convertStorage = multer.diskStorage({
  destination: (_, __, cb) => cb(null, IN_DIR), // שים לב: זה נתיב על ה-host
  filename: (_, file, cb) => cb(null, uuidv4() + path.extname(file.originalname))
});
const uploadConvert = multer({ storage: convertStorage });

// --- נקודת הקצה /convert הקיימת ---
// ⚠️ הערה חשובה: כפי שדיברנו, פקודת ה-'libreoffice' כאן כנראה לא תעבוד
// מכיוון ש-LibreOffice הוסר מתוך הקונטיינר הזה ('converter-app-1').
// יש להתאים את הלוגיקה הזו כך שתשתמש בשירות ה-LibreOffice הייעודי
// שבקונטיינר 'converter-converter-1' (שמאזין על פורט 2002).
app.post('/convert', uploadConvert.single('file'), (req, res) => {
  console.log(`[${new Date().toISOString()}] Received request to /convert`);
  if (!req.file) {
    return res.status(400).json({ error: 'No file uploaded for conversion.' });
  }
  const target = req.query.target || 'pdf';
  const inFile = req.file.filename;
  const outFile= `<span class="math-inline">\{path\.parse\(inFile\)\.name\}\.</span>{target}`;
  // ה-cmd הזה ינסה לרוץ בתוך קונטיינר ה-API. LibreOffice צריך להיות זמין שם.
  // הנתיבים כפי שהם נראים *בתוך קונטיינר ה-LibreOffice (converter-converter-1)*:
const inputFileInConverterContainer = `/input/${inFile}`;  // הקובץ שהועלה ל-IN_DIR ממופה ל-/input
const outputDirInConverterContainer = `/output`;          // ה-OUT_DIR ממופה ל-/output

// פקודת unoconv שתרוץ בתוך קונטיינר ה-converter
// היא תשמור את הפלט בתוך תיקיית הפלט של קונטיינר ה-converter
const unoconvCmd = `unoconv -f <span class="math-inline">\{target\} \-o "</span>{outputDirInConverterContainer}/<span class="math-inline">\{outFile\}" "</span>{inputFileInConverterContainer}"`;

// פקודת ה-docker exec שתריץ את unoconv בקונטיינר הנכון
const dockerExecCmd = `docker exec converter-converter-1 ${unoconvCmd}`;

console.log(`Executing via Docker: ${dockerExecCmd}`);
exec(dockerExecCmd, (execErr, stdout, stderr) => { // שיניתי את שם משתנה השגיאה ל-execErr
    // חשוב: לאחר שהפקודה מסתיימת, נמחק את קובץ המקור מ-IN_DIR
    // גם אם הייתה שגיאה וגם אם לא, כדי לא להשאיר קבצים מיותרים.
    fs.unlink(path.join(IN_DIR, inFile), unlinkSourceErr => {
        if (unlinkSourceErr) console.error(`[${new Date().toISOString()}] Error deleting source file ${inFile} after conversion attempt:`, unlinkSourceErr);
        else console.log(`[${new Date().toISOString()}] Successfully deleted source file ${inFile} after conversion attempt.`);
    });

    if (execErr) {
        console.error(`[${new Date().toISOString()}] Conversion failed for ${inFile} using unoconv:`, execErr);
        console.error(`[${new Date().toISOString()}] unoconv stderr:`, stderr);
        return res.status(500).json({ error: 'ההמרה נכשלה', details: stderr || execErr.message });
    }

    // נבדוק אם קובץ הפלט אכן נוצר בתיקיית הפלט על ה-host
    const outputPathOnHost = path.join(OUT_DIR, outFile);
    if (fs.existsSync(outputPathOnHost)) {
        console.log(`[${new Date().toISOString()}] Conversion successful for ${inFile}, output: ${outFile}`);
        res.json({ download_url: `https://api.magicfile.ai/files/${outFile}` });
    } else {
        console.error(`[${new Date().toISOString()}] Conversion reported success, but output file not found: ${outputPathOnHost}`);
        console.error(`[${new Date().toISOString()}] unoconv stdout:`, stdout);
        console.error(`[${new Date().toISOString()}] unoconv stderr:`, stderr);
        return res.status(500).json({ error: 'ההמרה נכשלה, קובץ פלט לא נוצר.' });
    }
});

// --- הגדרות חדשות עבור מיזוג PDF ---
const UPLOADS_DIR_FOR_MERGE = path.join(__dirname, 'uploads'); // /usr/src/app/uploads בתוך הקונטיינר
const MERGED_OUTPUT_DIR_FOR_MERGE = path.join(__dirname, 'merged_output'); // /usr/src/app/merged_output

// וידוא שהתיקיות קיימות (למרות שיצרת אותן ידנית, טוב שהקוד מוודא)
if (!fs.existsSync(UPLOADS_DIR_FOR_MERGE)) {
    fs.mkdirSync(UPLOADS_DIR_FOR_MERGE, { recursive: true });
    console.log(`Created directory for merge uploads: ${UPLOADS_DIR_FOR_MERGE}`);
}
if (!fs.existsSync(MERGED_OUTPUT_DIR_FOR_MERGE)) {
    fs.mkdirSync(MERGED_OUTPUT_DIR_FOR_MERGE, { recursive: true });
    console.log(`Created directory for merged output: ${MERGED_OUTPUT_DIR_FOR_MERGE}`);
}

const mergeStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, UPLOADS_DIR_FOR_MERGE);
    },
    filename: function (req, file, cb) {
        cb(null, `${uuidv4()}-${file.originalname}`);
    }
});

const uploadMerge = multer({
    storage: mergeStorage,
    limits: {
        fileSize: 25 * 1024 * 1024 // מגבלת גודל קובץ: 25MB
    },
    fileFilter: function (req, file, cb) {
        if (path.extname(file.originalname).toLowerCase() !== '.pdf') {
            // שגיאה תטופל על ידי ה-middleware לטיפול בשגיאות למטה
            return cb(new Error('Only PDF files are allowed for merging!'), false);
        }
        cb(null, true);
    }
});

// נקודת קצה לבדיקת תקינות כללית
app.get('/api/health', (req, res) => {
    res.status(200).json({ status: 'OK', message: 'MagicFile API is running' });
});

// נקודת קצה למיזוג PDF
app.post('/api/pdf/merge', uploadMerge.array('pdfs', 10), async (req, res, next) => {
    console.log(`[${new Date().toISOString()}] Received request to /api/pdf/merge`);
    if (!req.files || req.files.length < 2) {
        if (req.files && req.files.length > 0) { 
            req.files.forEach(file => fs.unlink(file.path, err => {
                if (err) console.error(`[${new Date().toISOString()}] Error deleting uploaded file ${file.path} on validation fail (less than 2 files):`, err);
            }));
        }
        return res.status(400).json({ success: false, message: 'Please upload at least two PDF files to merge.' });
    }

    const merger = new PDFMerger();
    const uploadedFilePaths = req.files.map(file => file.path);
    let tempMergedFilePath;

    try {
        console.log(`[${new Date().toISOString()}] Attempting to merge ${req.files.length} files for PDF merge:`);
        req.files.forEach(file => console.log(`  - ${file.originalname} (saved as ${file.filename}) in ${file.path}`));

        for (const file of req.files) {
            await merger.add(file.path);
        }

        const mergedFileName = `merged-${uuidv4()}.pdf`;
        tempMergedFilePath = path.join(MERGED_OUTPUT_DIR_FOR_MERGE, mergedFileName);

        await merger.save(tempMergedFilePath);
        console.log(`[${new Date().toISOString()}] Merged PDF saved to: ${tempMergedFilePath}`);

        res.download(tempMergedFilePath, mergedFileName, (downloadErr) => {
            if (downloadErr) {
                console.error(`[${new Date().toISOString()}] Error sending merged file to client:`, downloadErr);
            } else {
                console.log(`[${new Date().toISOString()}] Merged file successfully sent to client: ${mergedFileName}`);
            }

            fs.unlink(tempMergedFilePath, unlinkErr => {
                if (unlinkErr) console.error(`[${new Date().toISOString()}] Error deleting merged file from server ${tempMergedFilePath}:`, unlinkErr);
                else console.log(`[${new Date().toISOString()}] Successfully deleted merged file: ${tempMergedFilePath}`);
            });

            uploadedFilePaths.forEach(filePath => {
                fs.unlink(filePath, unlinkErr => {
                    if (unlinkErr) console.error(`[${new Date().toISOString()}] Error deleting uploaded source file ${filePath}:`, unlinkErr);
                    else console.log(`[${new Date().toISOString()}] Successfully deleted uploaded source file: ${filePath}`);
                });
            });
        });

    } catch (error) {
        console.error(`[${new Date().toISOString()}] Error during PDF merge process:`, error);
        uploadedFilePaths.forEach(filePath => {
            fs.unlink(filePath, unlinkErr => {
                if (unlinkErr) console.error(`[${new Date().toISOString()}] Error deleting uploaded source file ${filePath} on merge error:`, unlinkErr);
            });
        });
        if (tempMergedFilePath && fs.existsSync(tempMergedFilePath)) {
            fs.unlink(tempMergedFilePath, unlinkErr => {
                if (unlinkErr) console.error(`[${new Date().toISOString()}] Error deleting partially merged file ${tempMergedFilePath} on error:`, unlinkErr);
            });
        }
        if (!res.headersSent) {
           next(error); 
        }
    }
});

// Middleware לטיפול בשגיאות כללי, כולל שגיאות Multer (שים אותו אחרי כל ה-routes)
app.use((err, req, res, next) => {
    console.error(`[${new Date().toISOString()}] Error caught by global error handler:`, err);
    if (err instanceof multer.MulterError) {
        return res.status(400).json({ success: false, message: `File upload error: ${err.message}. Please check file size or type.` });
    } else if (err && err.message) { 
        return res.status(400).json({ success: false, message: err.message });
    } else if (err) { 
        return res.status(500).json({ success: false, message: 'An unexpected server error occurred.' });
    }
    if (!res.headersSent) {
      next(); 
    }
});

app.listen(PORT, () => {
    console.log(`MagicFile API (PM2 managed) is listening on port ${PORT}`);
});
